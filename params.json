{
  "name": "Core Hunter 3",
  "tagline": "Flexible core subset selection",
  "body": "Looking for the old Core Hunter 2 website? It's [here](v2/).\r\n\r\n## What is Core Hunter?\r\nCore Hunter is a flexible tool to sample diverse, representative subsets from large germplasm collections, with minimum redundancy. Such so-called core collections have applications in plant breeding and genetic resource management in general. Core Hunter can construct cores based on genetic marker data, phenotypic traits or precomputed distance matrices, optimizing one of many provided evaluation measures depending on the precise purpose of the core (e.g. maximum diversity, representativeness, or allelic richness). In addition, multiple measures can be simultaneously optimized as part of a weighted index to bring the different perspectives closer together. Version 3 has been recoded from scratch using the [JAMES framework](http://www.jamesframework.org) which provides the applied optimization algorithms.\r\n\r\n## Getting started with Core Hunter\r\nCore Hunter is implemented in Java and can be executed from R or using the graphical interface. In both cases you will need to have installed a [Java Runtime Environment (JRE)](http://www.oracle.com/technetwork/java/javase/downloads/jre8-downloads-2133155.html) version 8 or later.\r\n\r\n### R Package\r\nThe package `corehunter` is available on CRAN and can be installed with\r\n```R\r\n> install.packages(\"corehunter\")\r\n```\r\n\r\nAfterwards, load the package\r\n\r\n```R\r\n> library(corehunter)\r\n```\r\n\r\nand add your data, e.g.\r\n\r\n```R\r\n> my.genotypes <- genotypes(file = \"path/to/file\")\r\n```\r\n\r\nSampling a core collection is then as easy as\r\n\r\n```R\r\n> sampleCore(my.genotypes)\r\n```\r\n\r\nThere are numerous options when sampling a core. For example, you can change the size of the core (defaults to 20%), optimize a specific measure (defaults to average entry-to-nearest-entry distance), maximize a weighted index including multiple measures, change stop conditions (by default, the algorithm stops when it was unable to further improve the core during the last 10 seconds), etc. All functions have detailed documentation, for example try\r\n\r\n```R\r\n> ?sampleCore\r\n> ?objective\r\n> ?genotypes\r\n> ?phenotypes\r\n> ?distances\r\n> ?coreHunterData\r\n```\r\n\r\nMany examples are included in the R package as well.\r\n\r\n### Graphical interface\r\nA simple graphical interface is under development. More information will be posted here soon.\r\n\r\n## Supported data types\r\nCore Hunter 3 supports multiple types of genetic marker data, phenotypic traits and precomputed distance matrices. Data can be loaded from files and, when using the R package, from data frames and matrices. Both comma separated `csv` and tab separated `txt` files can be used.\r\n\r\n### Genetic marker data\r\n\r\nGenotypes can be provided in various formats.\r\n\r\n#### Default format\r\n\r\nThe default format contains one row per accession and one or more columns per marker. It is suited for data with a fixed number of allele observations per specific marker in each individual. The values are allele names or numbers, or in fact any token used to identify the detected alleles. Common cases are those with one or two columns per marker, e.g. suited for homozygous/haploid and diploid data, respectively. The number of observed alleles may vary across markers.\r\n\r\nThere is one compulsory header column `ID` specifying unique accession identifiers. Optionally, a second header column `NAME` can be included to provide names as well, which need not be unique nor defined for all accessions. The single header row contains marker names which are repeated for each column corresponding to the same marker. Optionally, column names may include a suffix added to the marker name, starting with a `.`, `-` or `_` character. For example, in the case of diploid data, it is allowed that the two columns corresponding to the same marker have names like `M5.1` & `M5.2`, `M17-a` & `M17-b` or  `X_1` & `X_2`, for markers named `M5`, `M17` and `X`, respectively. The column name prefix up to before the last occurrence of any `.`, `-` or `_` character is taken to be the marker name.\r\n\r\nThis format can not be used for bulk samples. For such data the frequency format should be used.\r\n\r\n##### Examples\r\n\r\nDiploid example data with five accessions and four markers:\r\n\r\nID | mk1.a | mk1.b | mk2.a | mk2.b | mk3.a | mk3.b | mk4.a | mk4.b\r\n---|-------|-------|-------|-------|-------|-------|-------|-------\r\nA  | 1     | 3     | B     | B     | a1    | a1    | -     | +\r\nB  | 2     | 2     | C     | A     | a1    | a2    | +     | -\r\nC  | 1     | 2     | D     | D     | a2    | a2    | +     | +\r\nD  | 2     | 3     | B     | B     | a2    | a1    | +     | -\r\nE  | 1     | 1     | A     | A     | a1    | a1    | -     | -\r\n\r\nIncluding accession names and with some missing data:\r\n\r\nID | NAME  | mk1-1 | mk1-2 | mk2-1 | mk2-2 | mk3-1 | mk3-2 | mk4-1 | mk4-2\r\n---|-------|-------|-------|-------|-------|-------|-------|-------|------\r\nA  | Alice | 1     | 3     | B     | B     | a1    | a1 \r\nB  | Bob   | 2     | 2     | C     | A     | a1    | a2    | +     | -\r\nC  | Carol | 1     | 2     | D     | D     | a2    | a2    | +     | +\r\nD  | Dave  | 2     | 3     | B     | B     | a2    | a1    | +     | -\r\nE  | Eve   | 1     | 1     |       |       | a1    | a1    | -     | -\r\n\r\nHomozygous data:\r\n\r\nID | mk1 | mk2 | mk3 | mk4\r\n---|-----|-----|-----|----\r\nA  | 1   | B   | a1  | -\r\nB  | 2   | C   | a1  | + \r\nC  | 1   | D   | a2  | +   \r\nD  | 2   | B   | a2  | +   \r\nE  | 1   | A   | a1  | - \r\n\r\n#### Frequency data\r\n\r\nThis is the original format from Core Hunter 1 and 2, but it has been transposed to follow the convention that rows are observations (accessions) and columns are variables (marker alleles). This format contains one row per accession and one column per combination of marker and allele. The values are allele frequencies which should sum to one for each marker in each accession. At least one column (allele) is provided per marker and the number of alleles per marker may vary.\r\n\r\nThere is one compulsory header column `ID` specifying unique accession identifiers. Optionally, a second header column `NAME` can be included to provide names as well, which need not be unique nor defined for all accessions. The first, compulsory header row contains marker names, which are repeated for each consecutive column corresponding to the same marker. Optionally, column names may include a suffix added to the marker name, starting with a `.`, `-` or `_` character. An optional second header row `ALLELE` can be included to provide allele names per marker.\r\n\r\nThis format is suitable for entries of individual or bulk samples.\r\n\r\n##### Examples\r\n\r\nExample data with five accessions and three markers, having three, two and again three alleles, respectively:\r\n\r\nID | mk1_1 | mk1_2 | mk1_3 | mk2_1 | mk2_2 | mk3_1 | mk3_2 | mk3_3\r\n---|-------|-------|-------|-------|-------|-------|-------|------\r\nA  |       |       |       | 0.50  | 0.50  | 0.00  | 0.50  | 0.50 \r\nB  | 1.00  | 0.00  | 0.00  | 0.50  | 0.50  | 0.00  | 0.50  | 0.50 \r\nC  | 0.60  | 0.00  | 0.40  | 0.50  | 0.50  | 0.00  | 0.50  | 0.50 \r\nD  |       |       |       | 1.00  | 0.00  |       |       |      \r\nE  | 0.33  | 0.33  | 0.33  | 0.50  | 0.50  | 0.00  | 0.50  | 0.50\r\n\r\nIncluding allele names:\r\n\r\nID         | mk1_1 | mk1_2 | mk1_3 | mk2_1 | mk2_2 | mk3_1 | mk3_2 | mk3_3\r\n-----------|-------|-------|-------|-------|-------|-------|-------|------\r\n**ALLELE** | a     | b     | c     | +     | -     | 1     | 2     | 3\r\nA          |       |       |       | 0.50  | 0.50  | 0.00  | 0.50  | 0.50 \r\nB          | 1.00  | 0.00  | 0.00  | 0.50  | 0.50  | 0.00  | 0.50  | 0.50 \r\nC          | 0.60  | 0.00  | 0.40  | 0.50  | 0.50  | 0.00  | 0.50  | 0.50 \r\nD          |       |       |       | 1.00  | 0.00  |       |       |      \r\nE          | 0.33  | 0.33  | 0.33  | 0.50  | 0.50  | 0.00  | 0.50  | 0.50\r\n\r\nIncluding accession and allele names (first two markers only):\r\n\r\nID         | NAME  | mk1_1 | mk1_2 | mk1_3 | mk2_1 | mk2_2 \r\n-----------|-------|-------|-------|-------|-------|-------\r\n**ALLELE** |       | a     | b     | c     | +     | -     \r\nA          | Alice |       |       |       | 0.50  | 0.50  \r\nB          | Bob   | 1.00  | 0.00  | 0.00  | 0.50  | 0.50 \r\nC          | Carol | 0.60  | 0.00  | 0.40  | 0.50  | 0.50  \r\nD          | Dave  |       |       |       | 1.00  | 0.00    \r\nE          | Eve   | 0.33  | 0.33  | 0.33  | 0.50  | 0.50 \r\n\r\n#### Biparental data\r\n\r\nThis format describes genetic marker data with two alleles per marker. It contains one row per accession and one column per marker with values `0`, `1` and `2` denoting the number of detected occurrences of an arbitrary reference allele. Thus, the values `0` and `2` indicate homozygotes of the two alleles, respectively, while `1` is used for a heterozygote.\r\n\r\nThere is one compulsory header column `ID` specifying unique accession identifiers. Optionally, a second header column `NAME` can be included to provide names as well, which need not be unique nor defined for all accessions. The single header row may optionally provide marker names.\r\n\r\nThis format is only suited for data where each marker has (at most) two possible alleles and can not be used to describe bulked data.\r\n\r\n##### Examples\r\n\r\nExample data with five accessions and seven markers:\r\n\r\nID | mk1 | mk2 | mk3 | mk4 | mk5 | mk6 | mk7\r\n---|-----|-----|-----|-----|-----|-----|----\r\nA  | 1   | 0   | 2   | 1   | 1   | 0   | 0\r\nB  | 2   | 0   | 2   | 0   | 1   | 2   | 1\r\nC  | 1   | 0   |     | 0   | 1   | 1   | 0\r\nD  | 1   | 0   | 1   | 1   | 1   | 2\r\nE  | 1   | 0   |     | 0   |     | 2   | 0\r\n\r\nIncluding accession names:\r\n\r\nID | NAME  | mk1 | mk2 | mk3 | mk4 | mk5 | mk6 | mk7\r\n---|-------|-----|-----|-----|-----|-----|-----|----\r\nA  | Alice | 1   | 0   | 2   | 1   | 1   | 0   | 0\r\nB  | Bob   | 2   | 0   | 2   | 0   | 1   | 2   | 1\r\nC  | Carol | 1   | 0   |     | 0   | 1   | 1   | 0\r\nD  | Dave  | 1   | 0   | 1   | 1   | 1   | 2\r\nE  | Eve   | 1   | 0   |     | 0   |     | 2   | 0\r\n\r\n### Precomputed distance matrix\r\n\r\nCore Hunter can load an arbitrary distance matrix computed from any type of data using any distance measure. The matrix contains one row and one column per accession, in the same order, which effectively means that the matrix should be symmetric.\r\n\r\nThere is one compulsory header column `ID` which provides unique accession identifiers. Optionally, a second header column `NAME` can be included to provide names as well, which need not be unique nor defined for all items. Accession identifiers can optionally be repeated on the single header row.\r\n\r\nAny row in the matrix can be truncated at or after the diagonal. The diagonal values should always be zero, when included. If some or all entries of the upper triangular part of the matrix are included, it is verified whether they match the lower triangular part, i.e. whether the matrix is effectively symmetric. Truncated values in the upper triangular part are copied from the lower triangular part.\r\n\r\nThis data type is particularly interesting when dealing with genetic marker data having a very large number of markers, as precomputing the distance matrix is then also an effective way to compress the data. It can also be used to run Core Hunter with data types and/or distance measures that are otherwise not supported.\r\n\r\n#### Examples\r\n\r\nWill be added soon.\r\n\r\n### Phenotypic trait data\r\n\r\nThis data describes observed phenotypic traits and can accommodate several variable types. The format used by Core Hunter includes one row per accession and one column per trait.\r\n\r\nThere must be one compulsory header column `ID` with unique accession identifiers. A second optional column `NAME` can be added to provide names as well, which need not be unique nor defined for all items. The first row contains the trait names, which need not be unique, but should be unique for later identification. Optionally, a second header row with header `TYPE` can be added which specifies the variable type of each trait (nominal, ordinal, interval, ratio) and optionally the data type. Please refer to the tables below. If this row is not included in the file, variable types are automatically inferred or can be set manually when using the R package, but will default to nominal strings when using the GUI. It is recommended to always specify variable types.\r\n\r\nTwo more optional rows can be added for ordinal, interval and ratio data to provide indicative minimum and maximum values, with the row headers `MIN` and `MAX`, respectively. If indicative minimum and maximum values are not provided these are calculated from the data. If the data exceed these minimum and maximum values, the actual minimum and maximum values are adjusted accordingly.\r\n\r\n#### Variable types\r\n\r\nVariable type | Code | Default data type\r\n------------- | ---- | -----------------\r\nNominal       | N    | String\r\nOrdinal       | O    | Integer\r\nInterval      | I    | Integer\r\nRatio         | R    | Double\r\n\r\n#### Data types\r\n\r\nData type   | Code\r\n----------- | ----\r\nBoolean     | B\r\nShort       | T\r\nInteger     | I\r\nLong        | L\r\nFloat       | F\r\nDouble      | D\r\nBig Integer | R\r\nBig Decimal | M\r\nDate        | A\r\nString      | S\r\nNone        | X\r\n\r\n#### Examples\r\n\r\nWill be added soon.\r\n\r\n## Evaluation measures\r\nOne of the main strengths of Core Hunter is that it can directly optimize a number of different evaluation measures.\r\nIf desired, multiple measures can be simultaneously optimized as part of a weighted index.\r\nThe measures included in Core Hunter 3 are listed below.\r\n\r\n### Distance based measures\r\n\r\n- Average entry-to-nearest-entry distance (diversity)\r\n- Average accession-to-nearest-entry distance (representativeness)\r\n- Average entry-to-entry distance (provided for historical reasons, not preferred)\r\n\r\nGower's distance is used to compute distances from phenotypic traits, and both the Modified Roger's as well as Cavalli-Sforza & Edwards distances are supported for genetic marker data. Alternatively, a precomputed distance matrix can be used.\r\n\r\n### Allelic richness\r\n\r\n- Shannon's index\r\n- Expected heterozygosity\r\n- Allele coverage\r\n\r\nAvailable for genetic marker data only.",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}